1.键重命名
rename key newkey

例1:普通使用
127.0.0.1:6379> set ybx 100
OK
127.0.0.1:6379> rename ybx wc
OK
127.0.0.1:6379> get wc
"100"
127.0.0.1:6379> get ybx
(nil)

例2: 如果在rename之前，键java已经存在，那么它的值也将被覆盖:
127.0.0.1:6379> set a b
OK
127.0.0.1:6379> set c d
OK
127.0.0.1:6379> rename a c
OK
127.0.0.1:6379> get a
(nil)
127.0.0.1:6379> get c
"b"

======================================================================
2.renamenx:
为了防止被强行rename，Redis提供了renamenx命令，确保只有newKey不存在时候才被覆盖
======================================================================
3.随机返回一个键
randomkey
下面示例中，当前数据库有1000个键值对，randomkey命令会随机从中挑选一个键：
127.0.0.1:6379> dbsize
1000
127.0.0.1:6379> randomkey
"hello"

======================================================================
4.expire:
expire key seconds：键在seconds秒后过期。

需要注意以下几点。
1）如果expire key的键不存在，返回结果为0：
2）如果过期时间为负值，键会立即被删除，犹如使用del命令一样：
======================================================================
5.expireat:
expireat命令可以设置键的秒级过期时间戳，
例如如果需要将键hello在2016-08-0100：00：00（秒级时间戳为1469980800）过期：
127.0.0.1:6379> expireat hello 1469980800
(integer) 1
======================================================================
6.查看键剩余过期时间
ttl命令和pttl都可以查询键的剩余过期时间，但是pttl精度更高可以达到毫秒级别，有3种返回值：
大于等于0的整数：键剩余的过期时间（ttl是秒，pttl是毫秒）。
-1：键没有设置过期时间。
-2：键不存在。
======================================================================
7.persist命令可以将键的过期时间清除：
======================================================================
8.set key value
对于字符串类型键，执行set命令会去掉过期时间，这个问题很容易在开发中被忽视。
======================================================================
9.Redis不支持二级数据结构（例如哈希、列表）内部元素的过期功能，例如不能对列表类型的一个元素做过期时间设置。
======================================================================
10.setex命令作为set+expire的组合，不但是原子执行，同时减少了一次网络通讯的时间。
======================================================================
11.move:(不推荐)
同实例,不同db,数据迁移
move key db
======================================================================
12.dump+restore:(不推荐)
不同实例之间数据迁移
非原子操作，需要两个客户端
======================================================================
13.migrate:(推荐)
migrate host port key|"" destination-db timeout [copy] [replace] [keys key [key ...]]

情况1 ：源Redis有键hello，目标Redis没有：
127.0.0.1:6379> dump ybx
"\x00\x061.1111\x06\x00X\x1e\x8d\x00Y<\xfb_"

127.0.0.1:6380> RESTORE ybx 0 "\x00\x061.1111\x06\x00X\x1e\x8d\x00Y<\xfb_"
OK
127.0.0.1:6380> get ybx
"1.1111"

情况2 ：源Redis和目标Redis都有键hello：
如果migrate命令没有加replace选项会收到错误提示，如果加了replace会返回OK表明迁移成功：
127.0.0.1:6379> migrate 127.0.0.1 6380 ybx 0 1000
(error) ERR Target instance replied with error: BUSYKEY Target key name
already exists.
127.0.0.1:6379> migrate 127.0.0.1 6379 hello 0 1000 replace
OK

情况3:Redis3.0.6版本以后迁移多个键的功能
127.0.0.1:6379> mset key1 value1 key2 value2 key3 value3
127.0.0.1:6379> migrate 127.0.0.1 6380 "" 0 5000 keys key1 key2 key3

======================================================================
migrate 实验:模拟出现IOERR的情况
思路:做5个大数据的key,设置超时为3秒
redis-server --port 6379
redis-server --port 6380

php 5.create_largedata_for_migrate_test.php

127.0.0.1:6379> MIGRATE 127.0.0.1 6380 "" 0  3 keys ybx0 ybx1 ybx2 ybx3 ybx4
IOERR
127.0.0.1:6379> keys *
1) "ybx1"
2) "ybx2"
3) "ybx0"
4) "ybx4"
5) "ybx3"

127.0.0.1:638> keys *
1) "ybx0"
======================================================================
14.全量遍历键
keys pattern

pattern直接使用星号，这是因为pattern使用的是glob风格的通配符：
*代表匹配任意字符。
代表匹配一个字符。
[]代表匹配部分字符，例如[1，3]代表匹配1，3，[1-10]代表匹配1到10的任意数字。
\x用来做转义，例如要匹配星号、问号需要进行转义。

下面操作匹配以j，r开头，紧跟edis字符串的所有键：
127.0.0.1:6379> keys [j,r]edis
1) "jedis"
2) "redis"

当需要遍历所有键时（例如检测过期或闲置时间、寻找大对象等），keys是一个很有帮助的命令，
例如想删除所有以ybx字符串开头的键，可以执行如下操作：
redis-cli keys ybx* | xargs redis-cli del

======================================================================
15.渐进式遍历
scan cursor [match pattern] [count number]
cursor:
是必需参数，实际上cursor是一个游标，第一次遍历从0开始，
每次scan遍历完都会返回当前游标的值，直到游标值为0，表示遍历结束。
match pattern:
是可选参数，它的作用的是做模式的匹配，这点和keys的模式匹配很像。
count number:
是可选参数，它的作用是表明每次要遍历的键个数，默认值是10，此参数可以适当增大。

======================================================================
切换数据库
select dbIndex

默认配置中是有16个数据库：(0-15)
databases 15
======================================================================
======================================================================
======================================================================
======================================================================
======================================================================
