1.添加操作
从右边插入元素
rpush key value [value ...]

rpush listkey c b a
(integer) 3

lrange listkey 0 -1
1) "c"
2) "b"
3) "a"
=======================================================================
2.从左边插入元素
lpush key value [value ...]

=======================================================================
3.向某个元素前或者后插入元素
linsert key before|after pivot value
linsert命令会从列表中找到等于pivot的元素，在其前（before）或 者后（after）插入一个新的元素value，
例如下面操作会在列表的元素b前插入java：
linsert listkey before b java

=======================================================================
4.获取指定范围内的元素列表
lrange key start end
lrange操作会获取列表指定索引范围所有的元素 。
索引下标有两个特点：
第一，索引下标从左到右分别是0到N-1，但是从右到左分别是-1到-N。
第二，lrange中的end选项包含了自身，这个和很多编程语言不包含end不太相同，

例如想获取列表的第2到第4个元素，可以执行如下操作：
127.0.0.1:6379> lrange listkey 1 3
1) "java"
2) "b"
3) "a"

=======================================================================
5.按照索引范围修剪列表
ltrim key start end

=======================================================================
6.获取列表指定索引下标的元素
lindex key index
例如当前列表最后一个元素为a：

127.0.0.1:6379> lindex listkey -1
"a"

=======================================================================
7.获取列表长度
llen key

=======================================================================
8.删除指定元素
lrem key count value
lrem命令会从列表中找到等于value的元素进行删除，根据count的不同分为三种情况：
count>0，从左到右，删除最多count个元素。
count<0，从右到左，删除最多count绝对值个元素。
count=0，删除所有。

例如向列表从左向右插入5个a，那么当前列表变为“a a a a a java b a”，
下面操作将从列表左边开始删除4个为a的元素：
127.0.0.1:6379> lrem listkey 4 a
(integer) 4
127.0.0.1:6379> lrange listkey 0 -1
1) "a"
2) "java"
3) "b"
4) "a"
=======================================================================
9.按照索引范围修剪列表
ltrim key start end

例子只保留列表listkey第2个到第4个元素
127.0.0.1:6379> lrange mylist 0 -1
1) "d"
2) "c"
3) "b"
4) "a"
5) "ybx"
6) "foo"
127.0.0.1:6379> ltrim mylist 1 3
127.0.0.1:6379> lrange mylist 0 -1
1) "c"
2) "b"
3) "a"
=======================================================================
4.修改
修改指定索引下标的元素：
lset key index newValue
下面操作会将列表listkey中的第3个元素设置为python：
127.0.0.1:6379> lset listkey 2 python
=======================================================================
5.阻塞操作
1.API:
blpop key [key ...] timeout
brpop key [key ...] timeout
blpop和brpop是lpop和rpop的阻塞版本，它们除了弹出方向不同，使用方法基本相同，
key[key...]：多个列表的键。
timeout：阻塞时间（单位：秒）。

2.情况分析:
列表为空：如果timeout=3，那么客户端要等到3秒后返回，如果timeout=0，那么客户端一直阻塞等下去：
如果此期间添加了数据element1，客户端立即返回
列表不为空：客户端会立即返回。

3.相同点:
blpop还是brpop都是只要第一个key里面有值立刻返回
不同点:
blpop弹出的是key左边的元素
brpop弹出的是key右边的元素
127.0.0.1:6379> lrange mylist 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "e"
127.0.0.1:6379> lrange mylist2 0 -1
1) "b1"
2) "c1"
3) "d1"
127.0.0.1:6379> BRPOP mylist mylist2 0
1) "mylist"
2) "e"
127.0.0.1:6379> blPOP mylist mylist2 0
1) "mylist"
2) "a"
4.如果多个客户端对同一个键执行brpop，那么最先执行brpop命令的客户端可以获取到弹出的值
客户端1：
client-1> brpop list:test 0
...阻塞

客户端2：
client-2> brpop list:test 0
...阻塞

客户端3：
client-3> brpop list:test 0
...阻塞

此时另一个客户端lpush一个元素到list：test列表中：
client-lpush> lpush list:test element
(integer) 1
那么客户端1最会获取到元素，因为客户端1最先执行brpop，而客户端2和客户端3继续阻塞：

=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
=======================================================================
