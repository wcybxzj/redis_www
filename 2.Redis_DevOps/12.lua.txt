eval:
eval 脚本内容 key个数 key列表 参数列表
此时KEYS[1]="redis"，ARGV[1]="world"，所以最终的返回结果是"hello redisworld"。
127.0.0.1:6379> eval 'return "hello".." "..KEYS[1]..ARGV[1]' 1 redis world
"hello redisworld"
================================================
redis-cli--eval直接执行文件
================================================
evalsha:
evalsha命令来执行Lua脚本,成为一个常驻功能下次这样不用每次传lua到redis
evalsha 脚本 SHA1值 key个数 key列表 参数列表

[root@web11 1.Redis_DevOps]# redis-cli script load "$(cat lua/7.work_with_redis.lua)"
"b106661b9561f87de3021735e6d568482e2a254f"

127.0.0.1:6379> evalsha "b106661b9561f87de3021735e6d568482e2a254f" 1 redis world
"hello redisworld"
================================================
Lua的Redis API
127.0.0.1:6379> eval 'return redis.call("set", KEYS[1], ARGV[1])' 1 hello world
OK
127.0.0.1:6379> eval 'return redis.call("get", KEYS[1])' 1 hello
"world"
================================================
redis.call和redis.pcall的不同在于，如果redis.call执行失败，
那么脚本执行结束会直接返回错误，而redis.pcall会忽略错误继续执行脚本
================================================
实例应用LUA
现要求将列表内所有的键对应热度做加1操作，并且保证是原子执行，此功能可以利用Lua脚本来实现。

rpush hot:user:list user:1:ratio user:8:ratio user:3:ratio user:99:ratio user:72:ratio
lrange hot:user:list 0 -1
1) "user:1:ratio"
2) "user:8:ratio"
3) "user:3:ratio"
4) "user:99:ratio"
5) "user:72:ratio"

mset user:1:ratio  "986" user:8:ratio  "762" user:3:ratio  "556" user:99:ratio "400" user:72:ratio  "101"
mget user:1:ratio user:8:ratio user:3:ratio user:99:ratio user:72:ratio
1) "986"
2) "762"
3) "556"
4) "400"
5) "101"

redis-cli --eval lua/8.lrange_and_mincr.lua hot:user:list
(integer) 5

结果:
127.0.0.1:6379> mget user:1:ratio user:8:ratio user:3:ratio user:99:ratio user:72:ratio
1) "987"
2) "763"
3) "557"
4) "401"
5) "102"
================================================
Redis提供了4个命令实现对Lua脚本的管理，下面分别介绍。
script load script
此命令用于将Lua脚本加载到Redis内存中，前面已经介绍并使用过了，这里不再赘述。

scripts exists sha1 [sha1 …]
此命令用于判断sha1是否已经加载到Redis内存中

script flush
此命令用于清除Redis内存已经加载的所有Lua脚本

script kill
此命令用于杀掉正在执行的Lua脚本
================================================
案例1 (script kill)
如果Lua脚本比较耗时，甚至Lua脚本存在问题，那么此时Lua脚本的执行会阻塞Redis，直到脚本执行完毕或者外部进行干预将其结束。
下面我们模拟一个Lua脚本阻塞的情况进行说明。
下面的代码会使Lua进入死循环：

Redis提供了一个lua-time-limit参数，默认是5秒，它是Lua脚本的“超时时间”，
但这个超时时间仅仅是当Lua脚本时间超过lua-time-limit后，向其他命令调用发送BUSY的信号，
但是并不会停止掉服务端和客户端的脚本执行，所以当达到lua-time-limit值之后，
其他客户端在执行正常的命令时，将会收到“Busy Redis is busy running a script”错误，
并且提示使用script kill或者shutdown nosave命令来杀掉这个busy的脚本：

使用shutdown save显然不太合适，所以选择script kill，当script
kill执行之后，客户端调用会恢复：

终端1:
127.0.0.1:6379> eval 'while 1==1 do end' 0

终端2:
127.0.0.1:6379> get ybx
(error) BUSY Redis is busy running a script. You can only call SCRIPT KILL or
SHUTDOWN NOSAVE.
127.0.0.1:6379> script kill
OK
127.0.0.1:6379> get ybx
"123"
================================================
案例2 (script kill)
如果当前Lua脚本正在执行写操作，那么script kill将不会生效。例如，我们模拟一个不停的写操作

redis-cli --eval 9.always_write.lua

127.0.0.1:6379> script kill
(error) UNKILLABLE Sorry the script already executed write commands against the dataset.
You can either wait the script termi nation or kill the server in a hard way using the SHUTDOWN NOSAVE command.
================================================
================================================
================================================
================================================
================================================
================================================
